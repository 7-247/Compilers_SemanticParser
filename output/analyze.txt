['int', 'identifier', ';', 'int', 'identifier', ';', 'int', 'identifier', '(', 'int', 'identifier', ',', 'int', 'identifier', ',', 'int', 'identifier', ')', '{', 'int', 'identifier', ';', 'int', 'identifier', ';', 'identifier', '=', 'number', ';', 'if', '(', 'identifier', '>', '(', 'identifier', '+', 'identifier', ')', ')', '{', 'identifier', '=', 'identifier', '+', '(', 'identifier', '*', 'identifier', '+', 'number', ')', ';', '}', 'else', '{', 'identifier', '=', 'identifier', ';', '}', 'while', '(', 'identifier', '<=', 'number', ')', '{', 'identifier', '=', 'identifier', '*', 'number', ';', '}', 'return', 'identifier', ';', '}', 'int', 'identifier', '(', 'int', 'identifier', ')', '{', 'identifier', '=', 'identifier', '+', 'number', ';', 'return', 'identifier', '*', 'number', ';', '}', 'void', 'identifier', '(', 'void', ')', '{', 'int', 'identifier', ';', 'int', 'identifier', ';', 'int', 'identifier', ';', 'identifier', '=', 'number', ';', 'identifier', '=', 'number', ';', 'identifier', '=', 'number', ';', 'identifier', '=', 'identifier', '(', 'identifier', ',', 'identifier', ',', 'identifier', '(', 'identifier', ')', ')', ';', 'return', ';', '}', '#'] 的分析栈：
0          #          int identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 7        		 # int      		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 3        		 # type_specifier 		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 3 10     		 # type_specifier identifier 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=a
读入新变量：name=a, 作用域=0, type=int, 临时变量=False
0 3 10 12  		 # type_specifier identifier M_declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 3 10 12 17 		 # type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 3 11     		 # type_specifier declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 3 11 14  		 # type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 3 11 14 19 		 # type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 1        		 # declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用101号产生式规约: external_declaration → declaration
0 2        		 # external_declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 7      		 # external_declaration int 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 3      		 # external_declaration type_specifier 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 3 10   		 # external_declaration type_specifier identifier 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=b
读入新变量：name=b, 作用域=0, type=int, 临时变量=False
0 2 3 10 12 		 # external_declaration type_specifier identifier M_declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 2 3 10 12 17 		 # external_declaration type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 2 3 11   		 # external_declaration type_specifier declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 2 3 11 14 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 3 11 14 19 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 2 1      		 # external_declaration declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用101号产生式规约: external_declaration → declaration
0 2 2      		 # external_declaration external_declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 7    		 # external_declaration external_declaration int 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 3    		 # external_declaration external_declaration type_specifier 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=program
0 2 2 3 10 		 # external_declaration external_declaration type_specifier identifier 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用602号产生式规约: M_function_definition → 
新函数：program type=int
0 2 2 3 10 13 		 # external_declaration external_declaration type_specifier identifier M_function_definition 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( 		 int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 7 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( int 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 3 10 13 18 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 3 10 13 18 37 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier identifier 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用617号产生式规约: function_parameter → type_specifier identifier
identifier.name=a
读入新变量：name=a, 作用域=program, type=int, 临时变量=False
0 2 2 3 10 13 18 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 36 76 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , 		 int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 36 76 7 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , int 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 3 10 13 18 36 76 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 2 3 10 13 18 36 76 37 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier identifier 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用617号产生式规约: function_parameter → type_specifier identifier
identifier.name=b
读入新变量：name=b, 作用域=program, type=int, 临时变量=False
0 2 2 3 10 13 18 36 76 113 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 36 76 113 76 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , 		 int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 36 76 113 76 7 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , int 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 3 10 13 18 36 76 113 76 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=c
0 2 2 3 10 13 18 36 76 113 76 37 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier identifier 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用617号产生式规约: function_parameter → type_specifier identifier
identifier.name=c
读入新变量：name=c, 作用域=program, type=int, 临时变量=False
0 2 2 3 10 13 18 36 76 113 76 113 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用615号产生式规约: function_parameter_list_suffix → 
0 2 2 3 10 13 18 36 76 113 76 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用614号产生式规约: function_parameter_list_suffix → , function_parameter function_parameter_list_suffix
0 2 2 3 10 13 18 36 76 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用614号产生式规约: function_parameter_list_suffix → , function_parameter function_parameter_list_suffix
0 2 2 3 10 13 18 36 78 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用611号产生式规约: function_parameter_list → function_parameter function_parameter_list_suffix
0 2 2 3 10 13 18 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) 		 { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用712号产生式规约: statement_list → 
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 7 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 3 10 13 18 35 75 112 133 156 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 156 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=i
读入新变量：name=i, 作用域=program, type=int, 临时变量=False
0 2 2 3 10 13 18 35 75 112 133 156 39 12 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 2 2 3 10 13 18 35 75 112 133 156 39 12 17 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 2 2 3 10 13 18 35 75 112 133 156 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 2 2 3 10 13 18 35 75 112 133 156 192 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 156 192 209 220 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 2 2 3 10 13 18 35 75 112 133 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用718号产生式规约: statement → declaration
0 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 7 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 3 10 13 18 35 75 112 133 156 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=j
0 2 2 3 10 13 18 35 75 112 133 156 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=j
读入新变量：name=j, 作用域=program, type=int, 临时变量=False
0 2 2 3 10 13 18 35 75 112 133 156 39 12 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 2 2 3 10 13 18 35 75 112 133 156 39 12 17 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 2 2 3 10 13 18 35 75 112 133 156 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 2 2 3 10 13 18 35 75 112 133 156 192 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 156 192 209 220 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 2 2 3 10 13 18 35 75 112 133 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用718号产生式规约: statement → declaration
0 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 151 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 151 168 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 3 10 13 18 35 75 112 133 151 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=0
0 2 2 3 10 13 18 35 75 112 133 151 174 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=i
expression.value=0
expression.type=int
(i,program).value=0
0 2 2 3 10 13 18 35 75 112 133 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 3 10 13 18 35 75 112 133 145 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['i']
0 2 2 3 10 13 18 35 75 112 133 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 157 193 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 3 10 13 18 35 75 112 133 155 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if 		 ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( 		 identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( identifier 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( primary_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( third_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( second_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( first_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 51 66 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression > 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用504号产生式规约: bool_operator → >
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( 		 identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 46 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( identifier 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( primary_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( third_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( second_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 72 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression + 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用511号产生式规约: first_operator → +
+.operator=+
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 90 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=c
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 90 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator identifier 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=c
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 90 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator primary_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=c
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 90 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator third_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=c
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 90 120 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator second_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用411号产生式规约: first_expression → first_expression first_operator second_expression
新增临时变量：name=$1, 作用域=program, type=int, 临时变量=True
expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( single_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( and_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 47 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( or_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 41 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( constant_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 81 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 43 81 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression ) 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用123号产生式规约: primary_expression → ( expression )
expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=$1
0 2 2 3 10 13 18 35 75 112 133 153 176 51 88 119 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用406号产生式规约: single_bool_expression → single_bool_expression bool_operator first_expression
新增临时变量：name=$2, 作用域=program, type=int, 临时变量=True
expression.name=$2
0 2 2 3 10 13 18 35 75 112 133 153 176 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$2
0 2 2 3 10 13 18 35 75 112 133 153 176 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( and_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$2
0 2 2 3 10 13 18 35 75 112 133 153 176 47 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( or_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$2
0 2 2 3 10 13 18 35 75 112 133 153 176 198 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用751号产生式规约: M_selection_statement → 
M_selection_statement.pos=4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用712号产生式规约: statement_list → 
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=j
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 168 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 72 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression + 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用511号产生式规约: first_operator → +
+.operator=+
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( 		 identifier * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 46 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( identifier 		 * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( primary_expression 		 * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( third_expression 		 * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=b
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 * identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 44 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression * 		 identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用513号产生式规约: second_operator → *
*.operator=*
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 44 82 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator 		 identifier + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=c
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 44 82 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator identifier 		 + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=c
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 44 82 115 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator primary_expression 		 + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用413号产生式规约: second_expression → second_expression second_operator primary_expression
新增临时变量：name=$3, 作用域=program, type=int, 临时变量=True
expression.name=$3
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=$3
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 + number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 72 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression + 		 number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用511号产生式规约: first_operator → +
+.operator=+
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 90 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator 		 number ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=1
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 90 42 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator number 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=1
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 90 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator primary_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=1
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 90 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator third_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=1
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 90 120 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator second_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用411号产生式规约: first_expression → first_expression first_operator second_expression
新增临时变量：name=$4, 作用域=program, type=int, 临时变量=True
expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( single_bool_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( and_bool_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 47 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( or_bool_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 41 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( constant_expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 52 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression 		 ) ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 23 52 89 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression ) 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用123号产生式规约: primary_expression → ( expression )
expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=$4
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 74 110 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用411号产生式规约: first_expression → first_expression first_operator second_expression
新增临时变量：name=$5, 作用域=program, type=int, 临时变量=True
expression.name=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 151 174 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=j
expression.value=$5
expression.type=int
(j,program).value=$5
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 145 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['j']
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 157 193 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 155 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list statement 		 } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 } else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 228 240 248 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list } 		 else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用701号产生式规约: compound_statement → { statement_list }
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 227 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement compound_statement 		 else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用717号产生式规约: statement → compound_statement
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement 		 else { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else 		 { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用752号产生式规约: N_selection_statement → 
回填.产生式序号=4
回填.值=10
N_selection_statement.pos=9
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement 		 { identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { 		 identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用712号产生式规约: statement_list → 
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 identifier = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=j
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier 		 = identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 168 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier = 		 identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator 		 identifier ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator identifier 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator primary_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator third_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 151 174 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=j
expression.value=a
expression.type=int
(j,program).value=a
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 145 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['j']
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list 		 ; } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 157 193 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list ; 		 } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 155 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list expression_statement 		 } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list statement 		 } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 } while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 148 165 196 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list } 		 while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用701号产生式规约: compound_statement → { statement_list }
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement compound_statement 		 while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用717号产生式规约: statement → compound_statement
0 2 2 3 10 13 18 35 75 112 133 153 176 198 212 222 231 241 249 254 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement statement 		 while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用741号产生式规约: selection_statement → if ( constant_expression ) M_selection_statement statement else N_selection_statement statement
回填.产生式序号=9
回填.值=11
0 2 2 3 10 13 18 35 75 112 133 144 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list selection_statement 		 while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用715号产生式规约: statement → selection_statement
0 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 while ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while 		 ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用753号产生式规约: N_iteration_statement → 
N_iteration_statement.pos=10
0 2 2 3 10 13 18 35 75 112 133 146 164 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement 		 ( identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( 		 identifier <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( identifier 		 <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( primary_expression 		 <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( third_expression 		 <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( second_expression 		 <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( first_expression 		 <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 <= number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression <= 		 number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用507号产生式规约: bool_operator → <=
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 88 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator 		 number ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=100
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 88 42 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator number 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=100
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 88 54 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=100
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 88 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=100
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 88 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=100
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 88 119 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用406号产生式规约: single_bool_expression → single_bool_expression bool_operator first_expression
新增临时变量：name=$6, 作用域=program, type=int, 临时变量=True
expression.name=$6
0 2 2 3 10 13 18 35 75 112 133 146 164 195 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$6
0 2 2 3 10 13 18 35 75 112 133 146 164 195 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( and_bool_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$6
0 2 2 3 10 13 18 35 75 112 133 146 164 195 47 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( or_bool_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$6
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression 		 ) { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) 		 { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用751号产生式规约: M_selection_statement → 
M_selection_statement.pos=12
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement 		 { identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { 		 identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用712号产生式规约: statement_list → 
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 168 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=j
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=j
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=j
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=j
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 * number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 24 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression * 		 number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用513号产生式规约: second_operator → *
*.operator=*
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 24 55 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator 		 number ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=2
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 24 55 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator number 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=2
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 24 55 91 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator primary_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用413号产生式规约: second_expression → second_expression second_operator primary_expression
新增临时变量：name=$7, 作用域=program, type=int, 临时变量=True
expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 151 174 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=i
expression.value=$7
expression.type=int
(i,program).value=$7
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 145 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['i']
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 157 193 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 155 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list statement 		 } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 } return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 148 165 196 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list } 		 return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用701号产生式规约: compound_statement → { statement_list }
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement compound_statement 		 return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用717号产生式规约: statement → compound_statement
0 2 2 3 10 13 18 35 75 112 133 146 164 195 211 221 224 238 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement statement 		 return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用743号产生式规约: iteration_statement → while N_iteration_statement ( constant_expression ) M_selection_statement statement
回填.产生式序号=12
回填.值=16
0 2 2 3 10 13 18 35 75 112 133 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list iteration_statement 		 return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用716号产生式规约: statement → iteration_statement
0 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 return identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 154 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return 		 identifier ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 154 183 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return identifier 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=i
0 2 2 3 10 13 18 35 75 112 133 154 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return primary_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 187 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return third_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 180 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return first_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 188 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return single_bool_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 186 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return and_bool_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 184 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return or_bool_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return constant_expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=i
0 2 2 3 10 13 18 35 75 112 133 154 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression 		 ; } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 154 189 207 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression ; 		 } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用731号产生式规约: jump_statement → return expression ;
0 2 2 3 10 13 18 35 75 112 133 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list jump_statement 		 } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用714号产生式规约: statement → jump_statement
0 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 } int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 3 10 13 18 35 75 112 133 159 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list } 		 int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用701号产生式规约: compound_statement → { statement_list }
0 2 2 3 10 13 18 35 75 111 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement 		 int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用601号产生式规约: function_definition → type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement
program函数结束，domain=0
0 2 2 8    		 # external_declaration external_declaration function_definition 		 int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用102号产生式规约: external_declaration → function_definition
0 2 2 2    		 # external_declaration external_declaration external_declaration 		 int identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 7  		 # external_declaration external_declaration external_declaration int 		 identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 2 3  		 # external_declaration external_declaration external_declaration type_specifier 		 identifier ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=demo
0 2 2 2 3 10 		 # external_declaration external_declaration external_declaration type_specifier identifier 		 ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用602号产生式规约: M_function_definition → 
新函数：demo type=int
0 2 2 2 3 10 13 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition 		 ( int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( 		 int identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 7 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( int 		 identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 2 3 10 13 18 37 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier 		 identifier ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 3 10 13 18 37 79 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier identifier 		 ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用617号产生式规约: function_parameter → type_specifier identifier
identifier.name=a
读入新变量：name=a, 作用域=demo, type=int, 临时变量=False
0 2 2 2 3 10 13 18 36 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter 		 ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用615号产生式规约: function_parameter_list_suffix → 
0 2 2 2 3 10 13 18 36 78 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter function_parameter_list_suffix 		 ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用611号产生式规约: function_parameter_list → function_parameter function_parameter_list_suffix
0 2 2 2 3 10 13 18 35 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list 		 ) { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) 		 { identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { 		 identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用712号产生式规约: statement_list → 
0 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 3 10 13 18 35 75 112 133 151 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 151 168 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 2 3 10 13 18 35 75 112 133 151 174 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 identifier + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 3 10 13 18 35 75 112 133 151 174 26 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier 		 + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=a
0 2 2 2 3 10 13 18 35 75 112 133 151 174 34 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=a
0 2 2 2 3 10 13 18 35 75 112 133 151 174 30 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=a
0 2 2 2 3 10 13 18 35 75 112 133 151 174 24 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=a
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 + number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 72 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression + 		 number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用511号产生式规约: first_operator → +
+.operator=+
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 74 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator 		 number ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=2
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 74 22 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator number 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=2
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 74 34 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=2
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 74 30 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=2
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 74 110 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用411号产生式规约: first_expression → first_expression first_operator second_expression
新增临时变量：name=$1, 作用域=demo, type=int, 临时变量=True
expression.name=$1
0 2 2 2 3 10 13 18 35 75 112 133 151 174 33 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=$1
0 2 2 2 3 10 13 18 35 75 112 133 151 174 31 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$1
0 2 2 2 3 10 13 18 35 75 112 133 151 174 29 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$1
0 2 2 2 3 10 13 18 35 75 112 133 151 174 27 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$1
0 2 2 2 3 10 13 18 35 75 112 133 151 174 21 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=$1
0 2 2 2 3 10 13 18 35 75 112 133 151 174 197 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=a
expression.value=$1
expression.type=int
(a,demo).value=$1
0 2 2 2 3 10 13 18 35 75 112 133 145 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 2 3 10 13 18 35 75 112 133 145 162 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['a']
0 2 2 2 3 10 13 18 35 75 112 133 157 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 157 193 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 2 3 10 13 18 35 75 112 133 155 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 return identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 154 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return 		 identifier * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 3 10 13 18 35 75 112 133 154 183 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return identifier 		 * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=a
0 2 2 2 3 10 13 18 35 75 112 133 154 191 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return primary_expression 		 * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=a
0 2 2 2 3 10 13 18 35 75 112 133 154 187 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return third_expression 		 * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=a
0 2 2 2 3 10 13 18 35 75 112 133 154 180 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression 		 * number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 154 180 56 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression * 		 number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用513号产生式规约: second_operator → *
*.operator=*
0 2 2 2 3 10 13 18 35 75 112 133 154 180 200 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression second_operator 		 number ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=2
0 2 2 2 3 10 13 18 35 75 112 133 154 180 200 178 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression second_operator number 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=2
0 2 2 2 3 10 13 18 35 75 112 133 154 180 200 214 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression second_operator primary_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用413号产生式规约: second_expression → second_expression second_operator primary_expression
新增临时变量：name=$2, 作用域=demo, type=int, 临时变量=True
expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 180 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 190 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return first_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 188 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return single_bool_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 186 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return and_bool_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 184 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return or_bool_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 177 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return constant_expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=$2
0 2 2 2 3 10 13 18 35 75 112 133 154 189 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression 		 ; } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 154 189 207 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression ; 		 } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用731号产生式规约: jump_statement → return expression ;
0 2 2 2 3 10 13 18 35 75 112 133 150 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list jump_statement 		 } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用714号产生式规约: statement → jump_statement
0 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 } void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 3 10 13 18 35 75 112 133 159 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list } 		 void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用701号产生式规约: compound_statement → { statement_list }
0 2 2 2 3 10 13 18 35 75 111 		 # external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement 		 void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用601号产生式规约: function_definition → type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement
demo函数结束，domain=0
0 2 2 2 8  		 # external_declaration external_declaration external_declaration function_definition 		 void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用102号产生式规约: external_declaration → function_definition
0 2 2 2 2  		 # external_declaration external_declaration external_declaration external_declaration 		 void identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 6 		 # external_declaration external_declaration external_declaration external_declaration void 		 identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用304号产生式规约: type_specifier → void
type_specifier.type=void
0 2 2 2 2 3 		 # external_declaration external_declaration external_declaration external_declaration type_specifier 		 identifier ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=main
0 2 2 2 2 3 10 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier 		 ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用602号产生式规约: M_function_definition → 
新函数：main type=void
0 2 2 2 2 3 10 13 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition 		 ( void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( 		 void ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 38 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( void 		 ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用613号产生式规约: function_parameter_list → void
0 2 2 2 2 3 10 13 18 35 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list 		 ) { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) 		 { int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { 		 int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用712号产生式规约: statement_list → 
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 7 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 2 2 3 10 13 18 35 75 112 133 156 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=a
读入新变量：name=a, 作用域=main, type=int, 临时变量=False
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 12 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 12 17 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 209 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 209 220 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 2 2 2 2 3 10 13 18 35 75 112 133 149 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用718号产生式规约: statement → declaration
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 7 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 2 2 3 10 13 18 35 75 112 133 156 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=b
读入新变量：name=b, 作用域=main, type=int, 临时变量=False
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 12 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 12 17 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 209 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 209 220 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 2 2 2 2 3 10 13 18 35 75 112 133 149 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用718号产生式规约: statement → declaration
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 7 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用301号产生式规约: type_specifier → int
type_specifier.type=int
0 2 2 2 2 3 10 13 18 35 75 112 133 156 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用117号产生式规约: M_declaration_parameter → 
identifier.name=c
读入新变量：name=c, 作用域=main, type=int, 临时变量=False
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 12 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用114号产生式规约: declaration_parameter_assign → 
0 2 2 2 2 3 10 13 18 35 75 112 133 156 39 12 17 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用112号产生式规约: declaration_parameter → identifier M_declaration_parameter declaration_parameter_assign
declaration_parameter.type=int
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用116号产生式规约: declaration_parameter_suffix → 
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 209 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 156 192 209 220 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用111号产生式规约: declaration → type_specifier declaration_parameter declaration_parameter_suffix ;
0 2 2 2 2 3 10 13 18 35 75 112 133 149 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用718号产生式规约: statement → declaration
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 168 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 22 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 34 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 30 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 24 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 33 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 31 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 29 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 27 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 21 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=3
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 197 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=a
expression.value=3
expression.type=int
(a,main).value=3
0 2 2 2 2 3 10 13 18 35 75 112 133 145 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 2 2 3 10 13 18 35 75 112 133 145 162 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['a']
0 2 2 2 2 3 10 13 18 35 75 112 133 157 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 157 193 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 2 2 3 10 13 18 35 75 112 133 155 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 168 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 22 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 34 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 30 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 24 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 33 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 31 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 29 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 27 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 21 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=4
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 197 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=b
expression.value=4
expression.type=int
(b,main).value=4
0 2 2 2 2 3 10 13 18 35 75 112 133 145 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 2 2 3 10 13 18 35 75 112 133 145 162 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['b']
0 2 2 2 2 3 10 13 18 35 75 112 133 157 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 157 193 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 2 2 3 10 13 18 35 75 112 133 155 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 168 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用number规约:
number.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 22 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用122号产生式规约: primary_expression → number
number.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 34 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 30 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 24 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 33 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 31 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 29 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 27 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 21 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 197 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=c
expression.value=2
expression.type=int
(c,main).value=2
0 2 2 2 2 3 10 13 18 35 75 112 133 145 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 2 2 3 10 13 18 35 75 112 133 145 162 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['c']
0 2 2 2 2 3 10 13 18 35 75 112 133 157 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 157 193 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 2 2 3 10 13 18 35 75 112 133 155 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 168 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #

用201号产生式规约: assignment_operator → =
=.operator==
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 identifier ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=program
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier 		 ( identifier , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( 		 identifier , identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 98 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( identifier 		 , identifier , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 106 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( primary_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 102 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( third_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 96 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( second_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 105 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( first_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 103 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( single_bool_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 101 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( and_bool_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 99 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( or_bool_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 93 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( constant_expression 		 , identifier , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=a
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression 		 , identifier , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , 		 identifier , identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 98 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , identifier 		 , identifier ( identifier ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 106 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , primary_expression 		 , identifier ( identifier ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 102 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , third_expression 		 , identifier ( identifier ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 96 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , second_expression 		 , identifier ( identifier ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 105 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , first_expression 		 , identifier ( identifier ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 103 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , single_bool_expression 		 , identifier ( identifier ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 101 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , and_bool_expression 		 , identifier ( identifier ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 99 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , or_bool_expression 		 , identifier ( identifier ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 93 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , constant_expression 		 , identifier ( identifier ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=b
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression 		 , identifier ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , 		 identifier ( identifier ) ) ; return ; } #
用identifier规约:
identifier.name=demo
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier 		 ( identifier ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( 		 identifier ) ) ; return ; } #
用identifier规约:
identifier.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 98 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( identifier 		 ) ) ; return ; } #

用121号产生式规约: primary_expression → identifier
identifier.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 106 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( primary_expression 		 ) ) ; return ; } #

用416号产生式规约: third_expression → primary_expression
primary_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 102 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( third_expression 		 ) ) ; return ; } #

用414号产生式规约: second_expression → third_expression
third_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 96 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( second_expression 		 ) ) ; return ; } #

用412号产生式规约: first_expression → second_expression
second_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 105 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( first_expression 		 ) ) ; return ; } #

用407号产生式规约: single_bool_expression → first_expression
first_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 103 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( single_bool_expression 		 ) ) ; return ; } #

用405号产生式规约: and_bool_expression → single_bool_expression
single_bool_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 101 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( and_bool_expression 		 ) ) ; return ; } #

用403号产生式规约: or_bool_expression → and_bool_expression
and_bool_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 99 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( or_bool_expression 		 ) ) ; return ; } #

用401号产生式规约: constant_expression → or_bool_expression
or_bool_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 93 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( constant_expression 		 ) ) ; return ; } #

用132号产生式规约: expression → constant_expression
constant_expression.name=c
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 104 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( expression 		 ) ) ; return ; } #

用154号产生式规约: expression_list_suffix → 
expression_list.name=[]
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 104 130 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( expression expression_list_suffix 		 ) ) ; return ; } #

用151号产生式规约: expression_list → expression expression_list_suffix
expression_list.name=['c']
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 138 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( expression_list 		 ) ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 98 124 138 160 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , identifier ( expression_list ) 		 ) ; return ; } #

用141号产生式规约: function_expression → identifier ( expression_list )
新增临时变量：name=$1, 作用域=main, type=int, 临时变量=True
function_expression.name=$1
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 97 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , function_expression 		 ) ; return ; } #

用131号产生式规约: expression → function_expression
function_expression.name=$1
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 142 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , expression 		 ) ; return ; } #

用154号产生式规约: expression_list_suffix → 
expression_list.name=[]
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 131 142 161 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression , expression expression_list_suffix 		 ) ; return ; } #

用153号产生式规约: expression_list_suffix → , expression expression_list_suffix
expression_list.name=['$1']
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 131 142 161 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression , expression expression_list_suffix 		 ) ; return ; } #

用153号产生式规约: expression_list_suffix → , expression expression_list_suffix
expression_list.name=['b', '$1']
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 104 130 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression expression_list_suffix 		 ) ; return ; } #

用151号产生式规约: expression_list → expression expression_list_suffix
expression_list.name=['a', 'b', '$1']
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 92 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression_list 		 ) ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 26 58 92 121 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier ( expression_list ) 		 ; return ; } #

用141号产生式规约: function_expression → identifier ( expression_list )
新增临时变量：name=$2, 作用域=main, type=int, 临时变量=True
function_expression.name=$2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 25 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator function_expression 		 ; return ; } #

用131号产生式规约: expression → function_expression
function_expression.name=$2
0 2 2 2 2 3 10 13 18 35 75 112 133 151 174 197 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; return ; } #

用724号产生式规约: assignment_expression → identifier assignment_operator expression
identifier.name=a
expression.value=$2
expression.type=int
(a,main).value=$2
0 2 2 2 2 3 10 13 18 35 75 112 133 145 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; return ; } #

用726号产生式规约: assignment_expression_list_suffix → 
assignment_expression_list.name=[]
0 2 2 2 2 3 10 13 18 35 75 112 133 145 162 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; return ; } #

用722号产生式规约: assignment_expression_list → assignment_expression assignment_expression_list_suffix
assignment_expression_list.name=['a']
0 2 2 2 2 3 10 13 18 35 75 112 133 157 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 157 193 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 return ; } #

用721号产生式规约: expression_statement → assignment_expression_list ;
0 2 2 2 2 3 10 13 18 35 75 112 133 155 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 return ; } #

用713号产生式规约: statement → expression_statement
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 return ; } #

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 return ; } #
0 2 2 2 2 3 10 13 18 35 75 112 133 154 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return 		 ; } #     
0 2 2 2 2 3 10 13 18 35 75 112 133 154 181 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return ; 		 } #       

用732号产生式规约: jump_statement → return ;
0 2 2 2 2 3 10 13 18 35 75 112 133 150 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list jump_statement 		 } #       

用714号产生式规约: statement → jump_statement
0 2 2 2 2 3 10 13 18 35 75 112 133 152 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 } #       

用711号产生式规约: statement_list → statement_list statement
0 2 2 2 2 3 10 13 18 35 75 112 133 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 } #       
0 2 2 2 2 3 10 13 18 35 75 112 133 159 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list } 		 #         

用701号产生式规约: compound_statement → { statement_list }
0 2 2 2 2 3 10 13 18 35 75 111 		 # external_declaration external_declaration external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement 		 #         

用601号产生式规约: function_definition → type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement
main函数结束，domain=0
0 2 2 2 2 8 		 # external_declaration external_declaration external_declaration external_declaration function_definition 		 #         

用102号产生式规约: external_declaration → function_definition
0 2 2 2 2 2 		 # external_declaration external_declaration external_declaration external_declaration external_declaration 		 #         

用3号产生式规约: start → 
0 2 2 2 2 2 9 		 # external_declaration external_declaration external_declaration external_declaration external_declaration start 		 #         

用2号产生式规约: start → external_declaration start
0 2 2 2 2 9 		 # external_declaration external_declaration external_declaration external_declaration start 		 #         

用2号产生式规约: start → external_declaration start
0 2 2 2 9  		 # external_declaration external_declaration external_declaration start 		 #         

用2号产生式规约: start → external_declaration start
0 2 2 9    		 # external_declaration external_declaration start 		 #         

用2号产生式规约: start → external_declaration start
0 2 9      		 # external_declaration start 		 #         

用2号产生式规约: start → external_declaration start
0 5        		 # start    		 #         
Accepted
